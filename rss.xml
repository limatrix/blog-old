<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
    <channel>
        <title>RSS feed title</title>
        <link>null</link>
        <description>RSS feed description</description>
        <lastBuildDate>Wed, 28 Sep 2016 15:25:22 +0800</lastBuildDate>
        <language>zh-cn</language>
        
        <item>
            <title>LINUX驱动问题分类以及定位的一般方法</title>
            <link>null/articles/linux-driver-debugging.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>null/articles/linux-driver-debugging.html</guid>
            <author>null limatrix</author>
            <pubDate>Wed, 13 Jul 2016 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;很遗憾没能在定位问题时记录详细的定位过程, 现在只能使用标准的LINUX内核人为的构造一些异常, 分析难免会有错误, 而且会忘掉很多细节. 以后再碰到问题时会及时更新&lt;/p&gt;
&lt;p&gt;暂且把问题分为三大类 : 异常, 系统问题, 特性问题&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;h2 id=&quot;1-异常&quot;&gt;1 异常&lt;/h2&gt;
&lt;h3 id=&quot;11-arm异常种类&quot;&gt;1.1 ARM异常种类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;复位异常&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;当CPU刚上电时或按下reset重启键之后进入该异常，该异常在管理模式下处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;一般/快速中断请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CPU和外部设备是分别独立的硬件执行单元，CPU对全部设备进行管理和资源调度处理，CPU要想知道外部设备的运行状态，要么CPU定时的去查看外部设备特定寄存器，要么让外部设备在出现需要CPU干涉处理时“打断”CPU，让它来处理外部设备的请求，毫无疑问第二种方式更合理，可以让CPU“专心”去工作，这里的“打断”操作就叫做中断请求，根据请求的紧急情况，中断请求分一般中断和快速中断，快速中断具有最高中断优先级和最小的中断延迟，通常用于处理高速数据传输及通道的中数据恢复处理，如DMA等，绝大部分外设使用一般中断请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;预取指令中止异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该异常发生在CPU流水线取指阶段，如果目标指令地址是非法地址进入该异常，该异常在中止异常模式下处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;未定义指令异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该异常发生在流水线技术里的译码阶段，如果当前指令不能被识别为有效指令，产生未定义指令异常，该异常在未定义异常模式下处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;软件中断指令（swi）异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该异常是应用程序自己调用时产生的，用于用户程序申请访问硬件资源时，例如：printf()打印函数，要将用户数据打印到显示器上，用户程序要想实现打印必须申请使用显示器，而用户程序又没有外设硬件的使用权，只能通过使用软件中断指令切换到内核态，通过操作系统内核代码来访问外设硬件，内核态是工作在特权模式下，操作系统在特权模式下完成将用户数据打印到显示器上。这样做的目的无非是为了保护操作系统的安全和硬件资源的合理使用，该异常在管理模式下处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据中止访问异常&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;该异常发生在要访问数据地址不存在或者为非法地址时，该异常在中止异常模式下处理&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上内容转自&lt;a href=&quot;http://blog.csdn.net/mr_raptor/article/details/6556195&quot;&gt;http://blog.csdn.net/mr_raptor/article/details/6556195&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;12-空指针异常&quot;&gt;1.2 空指针异常&lt;/h3&gt;
&lt;p&gt;按理说空指针异常是在新写的代码第一次调试时最容易出的问题. 下面是自己构造的异常: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内核版本  2.6.32.59&lt;/li&gt;
&lt;li&gt;文件  net/mac80211/cfg.c&lt;/li&gt;
&lt;li&gt;函数   ieee80211_add_iface&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-c&quot;&gt;static int ieee80211_add_iface(struct wiphy *wiphy, char *name,
                   enum nl80211_iftype type, u32 *flags,
                   struct vif_params *params)
{
    struct ieee80211_local *local = wiphy_priv(wiphy);
    struct net_device *dev;
    struct ieee80211_sub_if_data *sdata;
    int err;

    struct ieee80211_sub_if_data *pstTmp = NULL;

    pstTmp-&gt;flags = 0x1234;

    if (!nl80211_type_check(type))
        return -EINVAL;

    ......
}
&lt;/pre&gt;
&lt;p&gt;异常打印&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;Unable to handle kernem NULL pointer dereference at virtual address 00000154
pgd = c12d8000
[00000154] *pgd=0f8b8031, *pte=00000000, *ppte=00000000
Internal error: Oops:817 [#1]
last sysfs file:
Modules linked in:
CPU: 0    Not tainted (2.6.32.59 #58)
PC is at ieee80211_add_iface+0x60/0xcc
LR is at release_console_sem+0x180/0x190
pc: [&lt;c196352c&gt;]    lr: [&lt;c154dba8&gt;]   psr:60000013
sp : cd91dbf8  ip : cd91db18  fp : cd91dc24
r10: c1b4fc68  r9 : 00000004  r8 : cd91dc34
r7 : cf9200e0  r6 : cf8c3a20  r5 : cd91dc34  r4 : 00000006
r3 : 00000000  r2 : 00001234  r1 : 00000007  r0 : 0000001c
Flags: nZCv   IRQs on   FIQs on   Mode SVC_32   ISA ARM Segment user
Control: 18c5387d  Table: 012d8019  DAC: 00000015
Process hostapd (pid: 420, stack limit = 0xcd91c2e8)
Stack: (0xcd91dbf8 to 0xcd91e000)
......
Backtrace:
[&lt;c19634cc&gt;] (ieee80211_add_iface+0x0/0xcc) form [&lt;c194754c&gt;] (nl80211_new_interface+0x108/0x140)
......
&lt;/pre&gt;
&lt;p&gt;Mode SVC_32表示发生在内核空间 Mode UND_32表示发生在用户空间&lt;/p&gt;
&lt;p&gt;用gdb打开vmlinux(arm-none-linux-gnueabi-gdb vmlinux)时显示 no debugging symbols found
网上说需要打开 make menuconfig -&gt; kernel hacking -&gt; Kernel debugging -&gt; Compile the kernel with debug info(CONFIG_DEBUG_INFO), 但是我的.config里根本没有CONFIG_DEBUG_INFO&lt;/p&gt;
&lt;p&gt;接下来试试能不能在编译的时候直接添加-g, 在Makefile文件中看到了&lt;strong&gt;KBUILD_CFLAGS := -Wall -Wundef&lt;/strong&gt;, 加上&lt;strong&gt;-g&lt;/strong&gt; 重新编译, vmlinux变大了很多, 成功&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;arm-none-linux-gnueabi-gdb vmlinux
(gdb) info line *(ieee80211_add_iface+0x60)
Line 54 of &quot;net/mac80211/cfg.c&quot; starts at address 0xc1963524 &lt;ieee80211_add_iface+88&gt;
   and ends at 0xc1963530 &lt;ieee80211_add_iface+100&gt;
//pstTmp-&gt;flags = 0x1234; 这行的行号就是54
&lt;/pre&gt;
&lt;h3 id=&quot;13-函数指针异常&quot;&gt;1.3 函数指针异常&lt;/h3&gt;
&lt;p&gt;从问题现象来说, 我觉得函数指针错误引起的异常和数据指针错误引起的异常应该是一样的(还不确定). 如果函数指针所指向的地址可以访问, CPU应该是将这个地址按照指令读取, 读取的不是有效指令的概率非常大, 就会出现以下错误
&lt;strong&gt;Internal error: Oops - undefined instruction: 0&lt;/strong&gt;
也可能这个地址根本就不允许访问, 那应该出现以下错误
&lt;strong&gt;Unable to handle kernem NULL pointer dereference at virtual address 00001234&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;14-狗叫异常&quot;&gt;1.4 狗叫异常&lt;/h3&gt;
&lt;p&gt;通常CPU发生卡死，我们需要知道卡死位置，分析原因，然后改进，而不希望直接复位。设计的方法是：看门狗超时后先不发复位信号，而是先送出IRQ，看门狗IRQ通常配置成CPU的FIQ，如果CPU只是软件卡死，会响应该FIQ，然后我们在FIQ里收集异常信息和CPU寄存器信息，然后再走正常的panic流程。&lt;/p&gt;
&lt;p&gt;可能触发看门狗的有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死循环&lt;/li&gt;
&lt;li&gt;死锁&lt;/li&gt;
&lt;li&gt;大量的中断 (大量中断上报时导致任务没机会运行)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据第一段描述, 狗叫后能得到死循环和死锁的位置, 死循环得到的应该是循环结构里的任一条指令的位置, 逃不出循环体. 死锁则能够得到确定的位置. 然而大量中断导致的狗叫异常得到的位置却是随机的,可能每次都不一样,但是大概率的落在这个有问题的中断处理函数中.碰到这种现象,可以首先推断是中断问题, 目前我还没有看到过其他原因&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;Internal error: FIQ Happen [#1]
Modules linked in: xxx
CPU: 0    Not tainted (2.6.32.59 #58)
PC is at function_a+0x1c/0x20
LR is at function_b+0x1e0/0x738
pc: [&lt;c196352c&gt;]    lr: [&lt;c154dba8&gt;]   psr:60000013
sp : cd91dbf8  ip : cd91db18  fp : cd91dc24
r10: c1b4fc68  r9 : 00000004  r8 : cd91dc34
r7 : cf9200e0  r6 : cf8c3a20  r5 : cd91dc34  r4 : 00000006
r3 : 00000000  r2 : 00001234  r1 : 00000007  r0 : 0000001c
Flags: nZCv   IRQs on   FIQs on   Mode SVC_32   ISA ARM Segment user
Control: 18c5387d  Table: 012d8019  DAC: 00000015
&lt;/pre&gt;
&lt;h3 id=&quot;15-踩内存&quot;&gt;1.5 踩内存&lt;/h3&gt;
&lt;p&gt;本来想叫栈溢出和堆溢出, 但是有歧义, 网上很多栈溢出的说法是整个栈空间不够用了, 这里只是写数组越界, 可以叫踩内存, 也可以叫缓冲区溢出吧&lt;/p&gt;
&lt;p&gt;根据内存的用法不一样, 局部变量在栈内, &lt;strong&gt;kmalloc&lt;/strong&gt;出来的在堆内, 缓冲区溢出就是向数组内拷贝了过多的数据,导致数组之前(栈)之后(堆)的指针或者变量被覆盖, 理想的情况是溢出的不多, 覆盖掉了距离最近的指针, 或者整个栈帧都被覆盖掉了, 一般这种情况会触发一个数据访问异常, 但如果只覆盖了一个变量并随机引起功能问题, 那就难办多了. 更有甚者是在堆内覆盖掉部分字段(全局结构体), 而且离出问题的结构较远, 比如几百字节后的其他结构体, 那就自求多福吧&lt;/p&gt;
&lt;p&gt;栈溢出相较于堆溢出是容易定位的, 一般情况下不会离数据访问异常的位置太远. 当我们看到数据访问异常会先排查指针本身的问题, 如果指针本身很可靠, 则可以排查一下出问题函数的父函数或者子函数有没有缓冲区(数组), 拷贝数据时有没有边界检查. &lt;/p&gt;
&lt;p&gt;另外. 数据访问异常时会把当前的栈打印出来, 可以看一下栈里面的数据是否有比较个性的存在, 比如有一次看栈数据时发现栈帧的地址都是以f8b422xx(假设), 然而有一个地址却是01b422xx, 无需去还原各个栈帧的实际情况, 就可以怀疑帧地址被覆盖了.&lt;/p&gt;
&lt;p&gt;堆溢出则不会太幸运, 即使排除了某个字段/指针本身存在问题, 想要找到溢出的位置也不是很容易, 你需要知道这些全局结构在内存的排列方式, 对于复杂的代码来说, 光分析这一点已经是很艰难了&lt;/p&gt;
&lt;p&gt;如果想避免这种问题的话, 就得对所有数组操作进行边界检查, 记录异常分支, 使用安全的拷贝函数&lt;/p&gt;
&lt;h2 id=&quot;2-系统问题&quot;&gt;2 系统问题&lt;/h2&gt;
&lt;h3 id=&quot;21-内存泄漏&quot;&gt;2.1 内存泄漏&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;menuconfig&lt;/strong&gt;里面的&lt;strong&gt;kernel hacking&lt;/strong&gt;应该可以跟踪内存泄漏问题, 不过我没用过, 暂不讨论.&lt;/p&gt;
&lt;p&gt;我们是这样做的, 给kmalloc增加了一个参数用来标识是哪个模块申请的内存, 当出现内存泄漏时, 可以直接定位到对应的模块.&lt;/p&gt;
&lt;h3 id=&quot;22自旋锁引起的死锁&quot;&gt;2.2自旋锁引起的死锁&lt;/h3&gt;
&lt;p&gt;这个在上面的KDB里已经说过, 看门狗触发FIQ, 获取CPU当前状态, 能够定位到具体的位置, 然后再分析需要保护的数据的运行上下文(任务,中断,软中断), 运行在哪个核上, 在下面会详细说明&lt;/p&gt;
&lt;h3 id=&quot;23-信号量引起的死锁&quot;&gt;2.3 信号量引起的死锁&lt;/h3&gt;
&lt;h3 id=&quot;24-分析运行上下文&quot;&gt;2.4 分析运行上下文&lt;/h3&gt;
&lt;p&gt;在进行资源保护时, 需要明确的知道当前函数的运行上下文, 对于简单的代码分析一下就明确了, 但是对于复杂而又不熟悉的代码, 我一般采用下面的三个函数, 统计某函数的上下文情况, 但是这种方式可能会漏掉一些情况, 我曾经碰到过某函数必须在CPU非常繁忙时才有可能在任务中被调用, 主要是因为我粗心并没有仔细分析此函数的调用情况. 在这种情况下应该先分析代码, 再实际跑跑, 根据跑的结果再分析代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;smp_processor_id() 获取当前核ID&lt;/li&gt;
&lt;li&gt;in_irq() 是否在中断上下文&lt;/li&gt;
&lt;li&gt;in_softirq() 是否在软中断上下文&lt;/li&gt;
&lt;li&gt;如果在任务中, 还应该记录任务的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-特性问题&quot;&gt;3 特性问题&lt;/h2&gt;
&lt;p&gt;这个问题能说的并不多, 它并不像上面所提到的那些一般性的问题. 更多的需要对特性的理解和解决问题时的经验&lt;/p&gt;
&lt;h3 id=&quot;31-多个版本比较&quot;&gt;3.1 多个版本比较&lt;/h3&gt;
&lt;p&gt;经常出现这种情况, 本来这个功能好好的, 但是版本更新之后就出了问题, 修改或增加新功能引入问题很常见, 验证不到位其实也很常见. 如果出现这种问题, 多比较一下临近的版本就能很容确认是哪里引入的问题&lt;/p&gt;
&lt;h3 id=&quot;32-多种设备比较&quot;&gt;3.2 多种设备比较&lt;/h3&gt;
&lt;p&gt;不同设备的硬件不同, 也有时候软件也有差异, 通过这种比较也能够比较快速找到差异所在&lt;/p&gt;
&lt;h3 id=&quot;33-查看运行时信息&quot;&gt;3.3 查看运行时信息&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DEBUGGING信息&lt;/strong&gt;
写代码时需要打印函数参数, 打印错误分支, 打印报文信息等, 用不同的开关控制, 监控运行时代码执行情况, 很多错误在此时都能被定位&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;断言&lt;/strong&gt;
和上面的DEBUGGING一样, 放在不应该进入的分支&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统计信息&lt;/strong&gt;
比如接收/发送中断次数的统计, 队列发送报文数量的统计, 错包的统计等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;状态信息&lt;/strong&gt;
比如接收/发送队列当前的状态, 某些环的head和tail, 重要变量的值等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;34-printk&quot;&gt;3.4 printk&lt;/h3&gt;
&lt;p&gt;我们不可能在代码的所有分支都加上DEBUGGING信息, 而且很多问题仅仅通过上面提到的信息无法定位, 这时只能使用最原始的定位方法, 在所有的怀疑点加打印, 复现问题, 如此反复缩小问题范围, 直到最终定位&lt;/p&gt;
&lt;h3 id=&quot;35-寻找触发条件&quot;&gt;3.5 寻找触发条件&lt;/h3&gt;
&lt;p&gt;遇到特别难复现的问题怎么办? 如果还是用printk一层层的定位势必太慢了, 这时我们一般会猜, 构造什么情况能出现这种问题, 一般是对功能有比较深入的了解以后才能用此方法. 如果猜测能解释的通, 那别无选择, 还得复现, 验证猜测是否正确. 有一次狗叫异常, 这时能直接定位到某个while循环, 循环的内容是双向链表, 处理链表的接口都是标准Linux实现的, 并不需要首先就怀疑这些接口, 那就只能怀疑链表本身了. 什么样的链表能够造成死循环呢? 在一个空链表上连续两次插入同一个节点. 那又是什么导致了这个问题? 用户态程序同步出问题时会引发这种现象, 在此就不在详细说明了.    &lt;/p&gt;
&lt;h3 id=&quot;36-抓包&quot;&gt;3.6 抓包&lt;/h3&gt;
&lt;p&gt;协议相关的问题, 报文不通的问题, 第一反应应该就是抓包吧&lt;/p&gt;
&lt;p&gt;定位每一个问题时, 上面的方法基本都会用到, 不断的获取信息, 推理, 验证, 如此反复&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>隐藏HTML滚动条</title>
            <link>null/articles/how-to-hiding-scrollbar.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>null/articles/how-to-hiding-scrollbar.html</guid>
            <author>null limatrix</author>
            <pubDate>Wed, 13 Jul 2016 00:00:00 +0800</pubDate>
            <description>&lt;h2 id=&quot;1-如何显示滚动条&quot;&gt;1 如何显示滚动条&lt;/h2&gt;
&lt;p&gt;  需要给容器设置overflow属性. 如果不设置overflow属性, 就不会显示滚动条, 超出的内容会被显示, 容器的实际高度不变, 如果此容器下面还有内容, 则会与超出的部分重叠显示&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-html&quot;&gt;   &lt;div style=&quot;width:400px; height:400px; overflow:auto&quot;&gt;&lt;/div&gt;
&lt;/pre&gt;
&lt;h2 id=&quot;2-overflow的属性值&quot;&gt;2 overflow的属性值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;visible: 默认值, 内容不会被修剪, 会呈现在元素框之外, 和上面说的没有overflow属性是一样的&lt;/li&gt;
&lt;li&gt;hidden : 内容会被修剪, 但多余内容不可见, 没有滚动条&lt;/li&gt;
&lt;li&gt;scroll : 横竖滚动条默认都会显示. 如果内容没有超出, 只显示滚动条的底, 如果超出再显示滚动条&lt;/li&gt;
&lt;li&gt;auto   : 内容超出后才会显示滚动条&lt;/li&gt;
&lt;li&gt;inherit: 从父元素继承overflow属性的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-如何隐藏滚动条并且功能正常&quot;&gt;3 如何隐藏滚动条并且功能正常&lt;/h2&gt;
&lt;h3 id=&quot;31-将overflow设置为auto-将滚动条设置为透明或者页面颜色&quot;&gt;3.1 将overflow设置为auto, 将滚动条设置为透明或者页面颜色&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在网上搜索 &lt;strong&gt;滚动条颜色设置&lt;/strong&gt; , 搜出来的结果都是这个 &lt;strong&gt;scrollbar-face-color: #FFFFFF&lt;/strong&gt;, 经测试只对IE有效&lt;/li&gt;
&lt;li&gt;然后再搜 &lt;strong&gt;滚动条 webkit&lt;/strong&gt;, 搜出来 &lt;strong&gt;-webkit-scrollbar-thumb&lt;/strong&gt; 这一类样式, 只对chrome有效&lt;/li&gt;
&lt;li&gt;再搜 &lt;strong&gt;滚动条 firefox css&lt;/strong&gt; 和 &lt;strong&gt;滚动条 moz css&lt;/strong&gt;均没搜到有用的结果&lt;/li&gt;
&lt;li&gt;搜索 &lt;strong&gt;scrollbar moz css&lt;/strong&gt;, 搜到了这篇博客 &lt;strong&gt;&lt;a href=&quot;http://codemug.com/html/custom-scrollbars-using-css/&quot;&gt;http://codemug.com/html/custom-scrollbars-using-css/&lt;/a&gt;&lt;/strong&gt;. 和我之前搜到的内容一样, 但比较详细. IE和chrome有自己的设置, firefox不支持&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;无法采用这种方式&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;32-将滚动条覆盖&quot;&gt;3.2 将滚动条覆盖&lt;/h3&gt;
&lt;p&gt;使用两个DIV, 外侧DIV比内侧DIV窄一点, 将内侧的滚动条覆盖住&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-html&quot;&gt;&lt;div style=&quot;width:380px; height:400px; overflow:hidden&quot;&gt;
    &lt;div style=&quot;width:400px; height:400px; padding-right:20px; overflow:auto;&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;这种方法简单, 没觉得有什么不好, 可以考虑使用&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;33-使用插件&quot;&gt;3.3 使用插件&lt;/h3&gt;
&lt;p&gt;我选择的是perfect-scrollbar, 比较轻量级, 但不能初始化时设置不显示滚动条(有的插件是可以的). &lt;a href=&quot;https://github.com/noraesae/perfect-scrollbar&quot;&gt;https://github.com/noraesae/perfect-scrollbar&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;331-使用方法&quot;&gt;3.3.1 使用方法&lt;/h4&gt;
&lt;pre class=&quot;prettyprint linenums lang-html&quot;&gt;&lt;script src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;link href=&quot;perfect-scrollbar.min.css&quot; rel=&quot;stylesheet&quot;&gt;
&lt;script src=&quot;perfect-scrollbar.jquery.min.js&quot;&gt;&lt;/script&gt;
&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums lang-html&quot;&gt;&lt;div style=&quot;width:400px; height:400px; overflow:hidden; position:relative;&quot; id=&quot;container&quot;&gt;
&lt;/div&gt;
&lt;/pre&gt;
&lt;pre class=&quot;prettyprint linenums lang-javascript&quot;&gt;$(document).ready(function(){
    $(&#39;#container&#39;).perfectScrollbar();
});
&lt;/pre&gt;
&lt;p&gt;如果内容高于此DIV, 鼠标经过右边框时会显示滚动条&lt;/p&gt;
&lt;h4 id=&quot;332-如何隐藏滚动条&quot;&gt;3.3.2 如何隐藏滚动条&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;把perfect-scrollbar.min.css引用删掉
确实不显示滚动条, 而且内容可以滚动, 但又滚动的太多了, 内容可以滚出当前DIV&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有参数可供初始化时隐藏掉滚动条&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义自己的样式
文档里说可以定义自己的样式, 但用到了sass, 不了解这个, 目前也不想深究&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;覆盖掉滚动条的样式, 经验证, 把滚动条的底和滚动条本身的宽度都设置为0比较简单&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-css&quot;&gt;  .ps-container&gt;.ps-scrollbar-y-rail {
      width:0px;
  }
  .ps-container&gt;.ps-scrollbar-y-rail&gt;.ps-scrollbar-y {
      width:0px;
  }
  .ps-container&gt;.ps-scrollbar-y-rail:hover&gt;.ps-scrollbar-y, .ps-container&gt;.ps-scrollbar-y-rail:active&gt;.ps-scrollbar-y{
      width:0px;
  }
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;本节内容完全的实用主义, 对各知识点都没有深究, 各位看看即可&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>SSH TUNNEL 正向连接 反向连接 SOCKS代理的简单理解</title>
            <link>null/articles/ssh-tunnel.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>null/articles/ssh-tunnel.html</guid>
            <author>null limatrix</author>
            <pubDate>Wed, 13 Jul 2016 00:00:00 +0800</pubDate>
            <description>&lt;h2 id=&quot;1-基本概念&quot;&gt;1 基本概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本地转发/正向连接&lt;/li&gt;
&lt;li&gt;远程转发/反向连接&lt;/li&gt;
&lt;li&gt;动态转发/SOCKS代理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-区分标准是什么&quot;&gt;2 区分标准是什么&lt;/h2&gt;
&lt;p&gt;SSH的连接是有方向的, 从SSH CLIENT到SSH SERVER. 访问应用的连接也是有方向的, 从应用的CLIENT到应用的SERVER.如果SSH连接和应用连接的方向是一致的, 就叫做正向连接或本地转发. 方向相反则叫做反向连接或远程转发. &lt;/p&gt;
&lt;p&gt;上面的这种说法一开始让人不明白, 下面说一个更乱的:&lt;/p&gt;
&lt;p&gt;正向连接是SSH CLIENT连上SSH SERVER, 然后把SERVER能访问的机器的IP和端口映射到CLIENT上, 其中&quot;能访问的机器&quot;可以是SERVER本身&lt;/p&gt;
&lt;p&gt;反向连接是SSH CLIENT连上SSH SERVER, 然后把CLIENT能访问的机器的IP和端口映射到SERVER上, 其中&quot;能访问的机器&quot;可以是CLIENT本身&lt;/p&gt;
&lt;p&gt;不明白也没问题, 先看下面的实例, 然后再回来.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;写完下面的内容再回来有了新的发现&lt;/em&gt;
&lt;em&gt;数据流方向与SSH连接方向一致为正向连接, 相反为反向连接&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-能做什么&quot;&gt;3 能做什么&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;正向连接&lt;/strong&gt; A能访问B, B能访问C, 但是A不能访问C, 此时A可以通过B作为跳板访问C&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反向连接&lt;/strong&gt; 主要用来访问内网服务, 即穿NAT&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SOCKS代理&lt;/strong&gt; 通过代理服务器访问网络&lt;/p&gt;
&lt;h2 id=&quot;4-怎么做&quot;&gt;4 怎么做&lt;/h2&gt;
&lt;h3 id=&quot;41-正向连接&quot;&gt;4.1 正向连接&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh -L [客户端IP或省略]:[客户端端口]:[服务器侧能访问的IP]:[服务器侧能访问的端口] [登陆服务器的用户名@服务器IP] -p [服务器ssh服务端口（默认22）]
&lt;/pre&gt;
&lt;p&gt;下面的例子是通过公网服务器去访问其他的服务器, 这里ssh server为阿里云的VPS&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh client: 172.27.18.59 &lt;br /&gt;
  ssh server: 121.42.186.117 &lt;br /&gt;
  app client: 172.27.18.39 &lt;br /&gt;
  app server: pop.163.com &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh -L 172.27.18.59:8080:pop.163.com:110 root@121.42.186.117
&lt;/pre&gt;
&lt;p&gt;本条命令是在ssh client上执行, 数据方向是app client到ssh client再到ssh server, 与ssh连接方向一致&lt;/p&gt;
&lt;p&gt;在app client上访问172.27.18.59 8080&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;C:\&gt;nc 172.27.18.59 8080
+OK Welcome to coremail Mail Pop3 Server (163coms[726cd87d72d896a1ac393507346040fas])
USER xxxxx
+OK core mail
PASS xxxxx
-ERR 您没有权限使用pop3功能
&lt;/pre&gt;
&lt;p&gt;连接建立后, ssh client监听8080端口, 并与ssh server 22建立了连接. ssh server上显示的IP为221.12.31.29, 应该是我的出口IP&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh client
tcp        0      0 172.27.18.59:8080       0.0.0.0:*               LISTEN
tcp        0      0 172.27.18.59:51315      121.42.186.117:22       ESTABLISHED

ssh server
tcp        0    324 121.42.186.117:22       221.12.31.29:29146      ESTABLISHED
&lt;/pre&gt;
&lt;p&gt;访问172.27.18.59 8080后&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh client
tcp        0      0 172.27.18.59:8080       172.27.18.39:49219      ESTABLISHED

ssh server
tcp        0      0 121.42.186.117:28319    220.181.12.101:110      ESTABLISHED
&lt;/pre&gt;
&lt;p&gt;从上面的连接信息可以看出, 在app client上访问ssh client的8080端口, ssh server就会去访问app server. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里有个疑问&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;网上举的例子app server都是http服务器, 我实验的时候是不成功的, 配置如下&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh -L 172.27.18.59:8080:www.baidu.com:80 root@121.42.186.117
&lt;/pre&gt;
&lt;p&gt;在app client和ssh client上分别用浏览器和wget访问172.27.18.59:8080都不成功, &lt;code&gt;wget 172.27.18.59:8080 --debug&lt;/code&gt;看到能建立连接, 但是木有数据回来. 但是用nc就可以 (HTTP协议是通过wget的--debug参数获取的)&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;C:\nc 172.27.18.59 8080
GET / HTTP/1.1
User-Agent: Wget/1.15 (linux-gnu)
Accept: */*
Host: www.baidu.com
Connection: Keep-Alive

HTTP/1.1 200 OK
Server: bfe/1.0.8.18
Date: Tue, 27 Sep 2016 08:13:11 GMT
略 ......
&lt;/pre&gt;
&lt;p&gt;另外, 上面所说的&#39;其中&quot;能访问的机器&quot;可以是SERVER本身&#39;&#39;, 下面的命令就是通过ssh client的8080端口就能登录进ssh server&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh -L 172.27.18.59:8080:121.42.186.117:22 root@121.42.186.117
&lt;/pre&gt;
&lt;h3 id=&quot;42-反向连接&quot;&gt;4.2 反向连接&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh -R [服务器IP或省略]:[服务器端口]:[客户端侧能访问的IP]:[客户端侧能访问的IP的端口] [登陆服务器的用户名@服务器IP] -p [服务器ssh服务端口（默认22）]
&lt;/pre&gt;
&lt;p&gt;下面我们先建一个反向连接. 通过一台公网服务器访问内网PC的HTTP. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh client: 172.27.18.59 &lt;br /&gt;
  ssh server: 121.42.186.117 &lt;br /&gt;
  app client: 172.27.18.39 &lt;br /&gt;
  app server: 172.27.18.59 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh -R 121.42.186.117:8080:172.27.18.59:80 root@121.42.186.117
&lt;/pre&gt;
&lt;p&gt;本条命令同样是在ssh client上执行的, 但数据的访问方向却是通过app client到ssh server再到ssh client, 与ssh连接方向相反&lt;/p&gt;
&lt;p&gt;在app client上通过浏览器访问ssh server的8080端口, 就能访问到HTTP服务, 为什么这样就能访问而正向连接就不行呢???&lt;/p&gt;
&lt;h3 id=&quot;43-socks代理&quot;&gt;4.3 SOCKS代理&lt;/h3&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh -D [本地IP或省略]:[本地端口] [登陆服务器的用户名@服务器IP] -p [服务器ssh服务端口（默认22）]
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh client: 172.27.18.59 &lt;br /&gt;
  ssh server: 121.42.186.117 &lt;br /&gt;
  app client: 172.27.18.39 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;ssh -D 172.27.18.59:8080 root@121.42.186.117
&lt;/pre&gt;
&lt;p&gt;在app client上设置代理为172.27.18.59:8080, 设置方法为打开IE, 设置-&gt;Internet选项-&gt;连接-&gt;局域网设置-&gt;勾选为LAN使用代理服务器(留空地址和端口)-&gt;高级-&gt;在套接字栏填上IP和端口. 而不是HTTP代理.Chrome使用的是IE的设置, IE设置好后可直接使用Chrome上网,  然后随意访问一个网站, 在ssh server里能看到很多连接到你的目标网站的tcp连接&lt;/p&gt;
&lt;h2 id=&quot;5-常用参数&quot;&gt;5 常用参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;-C 压缩&lt;/li&gt;
&lt;li&gt;-N 表示不执行远程的命令&lt;/li&gt;
&lt;li&gt;-f 后台执行命令&lt;/li&gt;
&lt;li&gt;-g 允许远程主机连接本地转发端口&lt;/li&gt;
&lt;li&gt;-R 表明是将远端主机端口映射到本地端口&lt;/li&gt;
&lt;li&gt;-L 则是将本地端口映射到远端主机端口&lt;/li&gt;
&lt;li&gt;-D 本地动态端口转发&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
        <item>
            <title>在windows上用putty配置ssh tunnel</title>
            <link>null/articles/ssh-tunnel-by-putty-on-windows.html?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=rss</link>
            <guid>null/articles/ssh-tunnel-by-putty-on-windows.html</guid>
            <author>null limatrix</author>
            <pubDate>Wed, 13 Jul 2016 00:00:00 +0800</pubDate>
            <description>&lt;h2 id=&quot;正向连接&quot;&gt;正向连接&lt;/h2&gt;
&lt;p&gt;设备和IP地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh server: 121.42.186.117 &lt;br /&gt;
  ssh client: 172.27.18.39 &lt;br /&gt;
  app client: 172.27.18.39 &lt;br /&gt; 
  app server: pop.163.com &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;填写要连接的ssh server ip和端口, 然后在connection-&gt;ssh-&gt;tunnels里填写ssh信息. Source port填ssh client的ip:port, Destination填app server的ip:port&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/ssh-putty/putty-01.jpg&quot; alt=&quot;填写SSH服务器的IP和端口&quot;&gt;
&nbsp;
&lt;img src=&quot;../images/ssh-putty/putty-02.jpg&quot; alt=&quot;正向连接&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击open输入ssh server的user和pass连接到ssh server&lt;/p&gt;
&lt;p&gt;用nc连接172.27.18.39 8080, 在ssh server上查看tcp连接, 可以看到ssh server访问了pop.163.com&lt;/p&gt;
&lt;pre class=&quot;prettyprint linenums lang-bash&quot;&gt;C:\&gt;nc 172.27.18.39 8080
+OK Welcome to coremail Mail Pop3 Server (163coms[726cd87d72d896a1ac393507346040fas])
USER xxxxx
+OK core mail
PASS xxxxx
-ERR 您没有权限使用pop3功能
&lt;/pre&gt;
&lt;h2 id=&quot;反向向连接&quot;&gt;反向向连接&lt;/h2&gt;
&lt;p&gt;设备和IP地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh server: 121.42.186.117 &lt;br /&gt;
  ssh client: 172.27.18.39 &lt;br /&gt;
  app client: 172.27.18.39 &lt;br /&gt; 
  app server: 172.27.18.39 &lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;反向连接时Source port要填ssh server的ip:port, Destination要填app server的ip:port(没错吧?), 并选Remote&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../images/ssh-putty/putty-03.jpg&quot; alt=&quot;反向连接&quot;&gt;&lt;/p&gt;
&lt;p&gt;在浏览器里输入121.42.186.117:8080成功访问到172.27.18.39:8001提供的HTTP服务&lt;/p&gt;
&lt;h2 id=&quot;socks代理&quot;&gt;SOCKS代理&lt;/h2&gt;
&lt;p&gt;设备和IP地址&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ssh server: 121.42.186.117 &lt;br /&gt;
  ssh client: 172.27.18.39 &lt;br /&gt;
  app client: 172.27.18.39 &lt;br /&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 只填写Source port为172.27.18.39:8080, 然后选择Dynamic&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;../images/ssh-putty/putty-04.jpg&quot; alt=&quot;SOCKS代理&quot;&gt;&lt;/p&gt;
&lt;p&gt; 给浏览器设置socks代理(不是http代理), 然后随意访问一个网站, 在ssh server里能看到很多连接到你的目标网站的tcp连接&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
